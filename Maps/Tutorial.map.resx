<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Slam" xml:space="preserve">
    <value>You can perform an extra powerful attack with melee weapons, called Slam. Slam costs rage though, so get started by walking over the rage pot next to the zombies, to get a small rage boost. Then walk up to the zombies and press the right mouse button. As you will notice, this ability also stuns nearby enemies, which can be quite handy at times.</value>
  </data>
  <data name="Init" xml:space="preserve">
    <value>In order to move your character, use the WASD keys. Hover your cursor over different parts in the interface to get information about what they do. Once you feel comfortable with moving around, follow the road to find out more about the game mechanics.</value>
  </data>
  <data name="Hit" xml:space="preserve">
    <value>Try killing the zombie up ahead by hitting him with your sword. To hit him with your sword, walk up to him and press the left mouse button. Hold it to continue attacking. The gate will open up when you complete this task.</value>
  </data>
  <data name="Fire" xml:space="preserve">
    <value>You can use your rifle to kill zombies. Walk over the ammo box to the right to pick up some ammo, then switch to the rifle by pressing the rifle icon in the interface, or by pressing [2]. Fire by pressing the left mouse button. Using your  rifle is an efficient way of getting rid of your enemies, though ammo can be scarce so use it wisely.</value>
  </data>
  <data name="GhostBullet" xml:space="preserve">
    <value>You can fire an extra powerful bullet with ranged weapons, called Ghost bullet. This bullet will travel through walls and enemies without hurting them, but once it reaches its target location it explodes, damaging everything around it. Try aiming at the zombie and press the right mouse button. It's not a bad idea to use both normal shots and this special shot to get the most out of your rifle.</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>Congratulations! You have now completed the tutorial! Destroy the chest and pick up the antidote potion to complete the map.</value>
  </data>
  <data name="MapName" xml:space="preserve">
    <value>Tutorial</value>
  </data>
  <data name="MapObjectives" xml:space="preserve">
    <value>Learn the basic controls in Dead Meets Lead.</value>
  </data>
  <data name="InitTitle" xml:space="preserve">
    <value>Welcome to the tutorial of Dead Meets Lead!</value>
  </data>
  <data name="HitTitle" xml:space="preserve">
    <value>Hit</value>
  </data>
  <data name="SlamTitle" xml:space="preserve">
    <value>Slam</value>
  </data>
  <data name="FireTitle" xml:space="preserve">
    <value>Fire</value>
  </data>
  <data name="GhostBulletTitle" xml:space="preserve">
    <value>Ghost bullet</value>
  </data>
  <data name="EndTitle" xml:space="preserve">
    <value>Tutorial completed</value>
  </data>
  <data name="TinyTomText" xml:space="preserve">
    <value>You found me!</value>
  </data>
  <data name="TinyTomTitle" xml:space="preserve">
    <value>Tiny Tom says:</value>
  </data>
</root>