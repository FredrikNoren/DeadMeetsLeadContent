<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="Slam" xml:space="preserve">
    <value>Вы можете выполнить специальную атаку оружием ближнего боя, которая называется "сильный удар". При его выполнении снижается уровень ярости, поэтому прежде чем выполнить этот удар, вам нужно подобрать горшок ярости рядом с зомби. После этого подойдите к зомби и щелкните правой кнопкой мыши. Обратите внимание на то, что этот удар также оглушает находящихся поблизости противников, что иногда может оказаться очень полезно.</value>
  </data>
	<data name="Init" xml:space="preserve">
    <value>Для перемещения своего персонажа пользуйтесь клавишами W, A, S и D. Чтобы получить информацию о различных функциях интерфейса, наведите указатель мыши на соответствующую кнопку. Когда привыкнете к управлению, отправляйтесь вперед по дороге, чтобы узнать больше об игровой механике.</value>
  </data>
	<data name="Hit" xml:space="preserve">
    <value>Попробуйте убить стоящего перед вами зомби, ударив его мечом. Для этого подойдите к нему и щелкните левой кнопкой мыши. Зажмите ее, чтобы продолжать атаковать его. Ворота откроются, как только вы выполните это задание.</value>
  </data>
	<data name="Fire" xml:space="preserve">
    <value>Вы также можете убивать зомби с помощью своего ружья. Подойдите к ящику с боеприпасами, чтобы взять немного патронов, после чего нажмите на значок ружья или на клавишу [2], чтобы взять ружье в руки. Чтобы выстрелить, нажмите на левую кнопку мыши. Ружье может быть довольно эффективным средством избавления от противников, хотя патронов может иногда не хватать, так что не расходуйте их понапрасну.</value>
  </data>
	<data name="GhostBullet" xml:space="preserve">
    <value>С помощью своего ружья вы можете сделать и особый, очень мощный выстрел, который называется "Призрачный выстрел". Выпущенная в результате такого выстрела пуля проходит сквозь стены и противников, не нанося им урона, но достигнув своей цели, она взрывается, нанося урон всем окружающим противникам. Попробуйте прицелиться в зомби и щелкнуть правой кнопкой мыши. Чтобы использовать максимально эффективно, следует разумно комбинировать обычные и призрачные выстрелы.</value>
  </data>
	<data name="End" xml:space="preserve">
    <value>Примите поздравления! Вы закончили обучение! Теперь уничтожьте сундук и заберите противоядие, чтобы закончить прохождение этой карты.</value>
  </data>
	<data name="MapName" xml:space="preserve">
    <value>Обучение</value>
  </data>
	<data name="MapObjectives" xml:space="preserve">
    <value>Знакомство с базовым управлением игры Dead Meets Lead.</value>
  </data>
	<data name="InitTitle" xml:space="preserve">
    <value>Добро пожаловать на обучающую карту Dead Meets Lead!</value>
  </data>
	<data name="HitTitle" xml:space="preserve">
    <value>Удар</value>
  </data>
	<data name="SlamTitle" xml:space="preserve">
    <value>Сильный удар</value>
  </data>
	<data name="FireTitle" xml:space="preserve">
    <value>Огонь</value>
  </data>
	<data name="GhostBulletTitle" xml:space="preserve">
    <value>Призрачный выстрел</value>
  </data>
	<data name="EndTitle" xml:space="preserve">
    <value>Обучение окончено</value>
  </data>
	<data name="TinyTomText" xml:space="preserve">
    <value>Ты меня нашел!</value>
  </data>
	<data name="TinyTomTitle" xml:space="preserve">
    <value>Крошка Том говорит:</value>
  </data>
</root>